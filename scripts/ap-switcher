#!/bin/bash

### BEGIN INIT INFO
# Provides:          network-switcher
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start ap-switcher
# Description:       Start wpa_supplicant and dhclient services at boot timem, then runs auto_accesspoint_switching.py
### END INIT INFO

NAME=`basename $0`
PID_FILE="/var/run/${NAME}.pid"
BOOT_LOG_FILE="/var/log/boot-${NAME}.log"
RUN_LOG_FILE="/var/log/run-${NAME}.log"

IFWIFI=wlan0
REQ_DBM_IMPR=20.0
RATE=3.0
DELAY=10.0
WPA_SUPPLICANT_CONF="/etc/wpa_supplicant/wpa_supplicant_${NAME}.conf"
WPA_SUPPLICANT_LOG="/var/log/wpa_supplicant_${NAME}.log"

function start_wpa_supplicant
{
    echo "stopping network-manager"
    service network-manager stop 
    echo "killing NetworkManager"
    killall -q NetworkManager
    echo "killing dhclient"
    killall -q dhclient
    echo "shutting down wpa_supplicant"
    wpa_cli terminate
    echo "running wpa_supplicant"
    wpa_supplicant -d -B -D nl80211 -i $IFWIFI  -c ${WPA_SUPPLICANT_CONF} -f ${WPA_SUPPLICANT_LOG}
    # wait for things to settle down
    sleep 3
    echo "running dhclient $IFWIFI"
    dhclient $IFWIFI
}

function stop_wpa_supplicant
{
    echo "killing dhclient"
    killall -q dhclient
    echo "shutting down wpa_supplicant"
    wpa_cli terminate 
    echo "starting network-manager"
    service network-manager start
}

function start_script
{
    if is_running; then
        echo "Already started"
    else
        echo "Starting ${NAME}"
        ${SCREEN_CMD}

        sudo -E bash -c "screen -S ${SCREEN_NAME} -p 0 -X stuff \"${CMD}\015\"" &
        echo $! > "${PID_FILE}"
        echo "PID = $(get_pid)"
        echo "Started ${NAME}"
        if ! is_running; then
            echo "Unable to start, see ${BOOT_LOG_FILE}" 
            exit 1
        fi
    fi
}

function stop_script
{
    if is_running; then
        echo -n "Stopping ${NAME}.." 
        kill `get_pid`
        for i in {1..10}
        do
            if ! is_running; then
                break
            fi
            
            echo -n "." 
            sleep 1
        done
        echo
        
        if is_running; then
            echo "Not stopped; may still be shutting down or shutdown may have failed" 
            exit 1
        else
            echo "Stopped"
            if [ -f "$PID_FILE" ]; then
                rm "$PID_FILE"
            fi
        fi
    else
        echo "Not running" 
    fi
}

function get_pid
{
    cat "${PID_FILE}"    
}

function is_running
{
    [ -f "${PID_FILE}" ] && ps `get_pid` > /dev/null 2>&1
}

# MAIN

echo "Running $0 ($(date))" >> "${BOOT_LOG_FILE}" 2>&1

if [ -f /usr/bin/setup_environment.sh ]; then
    source /usr/bin/setup_environment.sh >> "${BOOT_LOG_FILE}" 2>&1
else
    echo "Could not find and run environment script /usr/bin/setup_environment.sh: $(readlink /usr/bin/setup_environment.sh)." >> "${BOOT_LOG_FILE}" 2>&1
    exit 1
fi

USER="rose"
SCREEN_NAME="${NAME}"
SCREEN_CMD="screen -t ${SCREEN_NAME} -S ${SCREEN_NAME} -d -m bash"
CMD="stdbuf -o0 \"${ROSE_TOOLS}/scripts/auto_accesspoint_switching.py --interface ${IFWIFI} --impr ${REQ_DBM_IMPR} --rate ${RATE} --delay ${DELAY}\""

echo "scripts folder = ${ROSE_TOOLS}/scripts" >> "${BOOT_LOG_FILE}" 2>&1
echo "USER = $USER" >> "${BOOT_LOG_FILE}" 2>&1
echo "CMD  = ${CMD}" >> "${BOOT_LOG_FILE}" 2>&1

case "$1" in
    start)
        start_wpa_supplicant >> "${BOOT_LOG_FILE}" 2>&1
        start_script >> "${BOOT_LOG_FILE}" 2>&1
    ;;
    stop)

        stop_wpa_supplicant >> "${BOOT_LOG_FILE}" 2>&1
        stop_script >> "${BOOT_LOG_FILE}" 2>&1
        
        ;;
    restart)
        $0 stop
        if is_running; then
            echo "Unable to stop, will not attempt to start" >> "${BOOT_LOG_FILE}" 2>&1
            exit 1
        fi
        $0 start
        ;;
    status)
        if is_running; then
            echo "Running" >> "${BOOT_LOG_FILE}" 2>&1
        else
            echo "Stopped" >> "${BOOT_LOG_FILE}" 2>&1
            exit 1
        fi
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status}" >> "${BOOT_LOG_FILE}" 2>&1
        exit 1
        ;;
esac

exit 0
